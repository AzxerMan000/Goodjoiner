--// üö® PET FINDER (Real Mutations Check)

getgenv().webhook = ""

getgenv().TargetPetNames = {

    "Cocofanto Elefanto",

    "Tralalero Tralala",

    "Odin Din Din Dun",

    "Girafa Celestre",

    "Trenostruzzo Turbo 3000",

    "Matteo",

    "Tigroligre Frutonni",

    "Orcalero Orcala",

    "Unclito Samito",

    "Gattatino Nyanino",

    "Espresso Signora",

    "Ballerino Lololo",

    "Piccione Macchina",

    "Los Crocodillitos",

    "Tukanno Bananno",

    "Trippi Troppi Troppa Trippa",

    "Los Tungtungtungcitos",

    "Agarrini la Palini",

    "Bulbito Bandito Traktorito",

    "Los Orcalitos",

    "Tipi Topi Taco",

    "Bombardini Tortinii",

    "Tralalita Tralala",

    "Urubini Flamenguini",

    "Alessio",

    "Pakrahmatmamat",

    "Los Bombinitos",

    "Brr es Teh Patipum",

    "Tartaruga Cisterna",

    "Cacasito Satalito",

    "Mastodontico Telepiedone",

    "Crabbo Limonetta",

    "Gattito Tacoto",

    "Los Tipi Tacos",

    "Antonio",

    "Las Capuchinas",

    "Orcalita Orcala",

    "Piccionetta Macchina",

    "Anpali Babel",

    "Extinct Ballerina",

    "Tractoro Dinosauro",

    "Belula Beluga",

    "Capi Taco",

    "Dug dug dug",

    "Corn Corn Corn Sahur",

    "Brasilini Berimbini",

    "Squalanana",

    "Pop Pop Sahur",

    "La Vacca Saturno Saturnita",

    "Los Tralaleritos",

    "Graipuss Medussi",

    "La Grande Combinasion",

    "Sammyni Spyderini",

    "Garama and Madundung",

    "Torrtuginni Dragonfrutini",

    "Las Tralaleritas",

    "Pot Hotspot",

    "Nuclearo Dinossauro",

    "Las Vaquitas Saturnitas",

    "Chicleteira Bicicleteira",

    "Los Combinasionas",

    "Karkerkar Kurkur",

    "Dragon Cannelloni",

    "Los Hotspotsitos",

    "Esok Sekolah",

    "Nooo My Hotspot",

    "Los Matteos",

    "Job Job Job Sahur",

    "Dul Dul Dul",

    "Blackhole Goat",

    "Los Spyderinis",

    "Ketupat Kepat",

    "La Supreme Combinasion",

    "Bisonte Giuppitere",

    "Guerriro Digitale",

    "Ketchuru and Musturu",

    "Spaghetti Tualetti",

    "Los Nooo My Hotspotsitos",

    "Trenostruzzo Turbo 4000",

    "Fragola La La La",

    "La Sahur Combinasion",

    "La Karkerkar Combinasion",

    "Tralaledon",

    "Los Bros",

    "Los Chicleteiras",

    "Chachechi",

    "Extinct Tralalero",

    "Extinct Matteo",

    "67",

    "Las Sis",

    "Celularcini Viciosini",

    "La Extinct Grande",

    "Quesadilla Crocodila",

    "Tacorita Bicicleta",

    "La Cucaracha",

    "To to to Sahur",

    "Mariachi Corazoni",

    "Los Tacoritas",

    "Tictac Sahur",

    "Yess my examine",

    "Karker Sahur",

    "Noo my examine",

    "Money Money Puggy",

    "Los Primos",

    "Tang Tang Keletang",

    "Perrito Burrito",

    "Chillin Chili",

    "Los Tortus",

    "Los Karkeritos",

    "Los Jobcitos",

    "Los 67",

    "La Secret Combinasion",

    "Burguro And Fryuro",

    "Strawberry Elephant"

}

local HttpService = game:GetService("HttpService")

local Workspace = game:GetService("Workspace")

local Players = game:GetService("Players")

local ReplicatedStorage = game:GetService("ReplicatedStorage")

-- –ö—ç—à –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø–∏—Ç–æ–º—Ü–µ–≤ —Å –≤—Ä–µ–º–µ–Ω–µ–º

local foundPetsCache = {}

local lastFullReset = 0

local RESET_INTERVAL = 10 -- —Å–µ–∫—É–Ω–¥

-- –ö—ç—à –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–∏—Ç–æ–º—Ü–µ–≤

local generationCache = {}

-- –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞

local TARGET_PETS = {}

for _, petName in ipairs(getgenv().TargetPetNames) do

    TARGET_PETS[petName] = true

end

-- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ (—Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º)

local function getPetGeneration(petName)

    if generationCache[petName] then

        return generationCache[petName]

    end

    

    local generation = "Unknown"

    pcall(function()

        local datas = ReplicatedStorage:WaitForChild("Datas")

        local animals = datas:WaitForChild("Animals")

        local petData = require(animals)[petName]

        if petData and petData.Generation then

            generation = tostring(petData.Generation)

            generationCache[petName] = generation

        end

    end)

    

    return generation

end

-- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–∞–ª—å–Ω—ã—Ö –º—É—Ç–∞—Ü–∏–π —É –ø–∏—Ç–æ–º—Ü–∞

local function getPetMutations(petObject)

    local mutations = {}

    

    -- –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –º—É—Ç–∞—Ü–∏–π

    local function checkForMutations(obj)

        -- –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–º—è –æ–±—ä–µ–∫—Ç–∞

        local name = obj.Name:lower()

        

        -- –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –º—É—Ç–∞—Ü–∏–∏

        if name:find("gold") then table.insert(mutations, "Gold") end

        if name:find("diamond") then table.insert(mutations, "Diamond") end

        if name:find("candy") then table.insert(mutations, "Candy") end

        if name:find("rainbow") then table.insert(mutations, "Rainbow") end

        if name:find("yin") or name:find("yang") then table.insert(mutations, "Yin Yang") end

        if name:find("lava") then table.insert(mutations, "Lava") end

        

        -- –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–µ –æ–±—ä–µ–∫—Ç—ã

        if obj.Parent then

            local parentName = obj.Parent.Name:lower()

            if parentName:find("gold") and not table.find(mutations, "Gold") then table.insert(mutations, "Gold") end

            if parentName:find("diamond") and not table.find(mutations, "Diamond") then table.insert(mutations, "Diamond") end

            if parentName:find("candy") and not table.find(mutations, "Candy") then table.insert(mutations, "Candy") end

            if parentName:find("rainbow") and not table.find(mutations, "Rainbow") then table.insert(mutations, "Rainbow") end

            if (parentName:find("yin") or parentName:find("yang")) and not table.find(mutations, "Yin Yang") then table.insert(mutations, "Yin Yang") end

            if parentName:find("lava") and not table.find(mutations, "Lava") then table.insert(mutations, "Lava") end

        end

        

        -- –ü—Ä–æ–≤–µ—Ä—è–µ–º Configuration –¥–ª—è –º—É—Ç–∞—Ü–∏–π

        local config = obj:FindFirstChild("Configuration")

        if config then

            local mutationValue = config:FindFirstChild("Mutation")

            if mutationValue then

                local mutationType = tostring(mutationValue.Value)

                if mutationType ~= "" and mutationType ~= "None" and not table.find(mutations, mutationType) then

                    table.insert(mutations, mutationType)

                end

            end

        end

        

        -- –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ StringValue, IntValue, BoolValue –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏

        if config then

            for _, value in ipairs(config:GetChildren()) do

                if value:IsA("StringValue") or value:IsA("IntValue") or value:IsA("BoolValue") then

                    local valueName = value.Name:lower()

                    local valueData = tostring(value.Value):lower()

                    

                    if valueName:find("mutation") or valueName:find("variant") or valueName:find("type") then

                        if valueData ~= "" and valueData ~= "none" and valueData ~= "normal" and valueData ~= "false" then

                            local formattedMutation = valueData:gsub("^%l", string.upper)

                            if not table.find(mutations, formattedMutation) then

                                table.insert(mutations, formattedMutation)

                            end

                        end

                    end

                end

            end

        end

    end

    

    -- –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∞–º –ø–∏—Ç–æ–º–µ—Ü –∏ –µ–≥–æ —Ä–æ–¥–∏—Ç–µ–ª–µ–π

    checkForMutations(petObject)

    

    -- –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã

    local uniqueMutations = {}

    for _, mutation in ipairs(mutations) do

        if not table.find(uniqueMutations, mutation) then

            table.insert(uniqueMutations, mutation)

        end

    end

    

    return uniqueMutations

end

-- –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∂–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ

local function preloadGenerations()

    for _, petName in ipairs(getgenv().TargetPetNames) do

        getPetGeneration(petName)

    end

end

-- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è join –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏

local function getJoinInfo()

    local placeId = game.PlaceId

    local jobId = game.JobId

    local joinLink = "https://examplejoiner.vercel.app/"?placeid=".. placeId .. "gameInstanceid=" .. jobId"
    
    local joinScript = "game:GetService('TeleportService'):TeleportToPlaceInstance(" .. placeId .. ', "' .. jobId .. '")'

    return joinLink, joinScript

end

-- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤–ª–∞–¥–µ–ª—å—Ü–∞ –ø–ª–æ—Ç–∞

local function getPlotOwner(plot)

    local owner = "Unknown"

    

    for _, player in ipairs(Players:GetPlayers()) do

        if plot.Name:find(player.Name) or plot.Name:find(tostring(player.UserId)) then

            owner = player.Name

            break

        end

    end

    

    return owner

end

-- –§—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ —É—Å—Ç–∞—Ä–µ–≤—à–µ–≥–æ –∫—ç—à–∞

local function cleanupOldCache()

    local currentTime = tick()

    local removedCount = 0

    

    for petKey, foundTime in pairs(foundPetsCache) do

        if currentTime - foundTime > RESET_INTERVAL then

            foundPetsCache[petKey] = nil

            removedCount = removedCount + 1

        end

    end

    

    return removedCount

end

-- –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –≤–µ–±—Ö—É–∫ (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è)

local function sendPetFound(petName, plotName, plotOwner, mutations)

    local generation = getPetGeneration(petName)

    local joinLink, joinScript = getJoinInfo()

    

    -- –§–æ—Ä–º–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –º—É—Ç–∞—Ü–∏–π

    local mutationText = "None"

    if #mutations > 0 then

        mutationText = table.concat(mutations, ", ")

    end

    

    local data = {

        username = "Finder",

        embeds = {{

            title = "üö® " .. petName,

            description = "**Generation:** " .. generation .. "/s\n**Mutations:** " .. mutationText,

            color = 65280,

            fields = {

                {

                    name = "üë§ Owner",

                    value = plotOwner,

                    inline = true

                },

                {

                    name = "üì¶ Plot",

                    value = plotName,

                    inline = true

                },

                {

                    name = "üîó Join Link",

                    value = "[Click Here](" .. joinLink .. ")",

                    inline = false

                },

                {

                    name = "üìú Join Script",

                    value = "```lua\n" .. joinScript .. "\n```",

                    inline = false

                },

                {

                    name = "üåê Server Info",

                    value = "Job ID: " .. game.JobId,

                    inline = true

                }

            },

            timestamp = DateTime.now():ToIsoDate()

        }}

    }

    

    local json = HttpService:JSONEncode(data)

    

    -- –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –±–µ–∑ –æ–∂–∏–¥–∞–Ω–∏—è

    coroutine.wrap(function()

        pcall(function()

            if syn and syn.request then

                syn.request({

                    Url = getgenv().webhook,

                    Method = "POST",

                    Headers = {

                        ["Content-Type"] = "application/json"

                    },

                    Body = json

                })

            elseif request then

                request({

                    Url = getgenv().webhook,

                    Method = "POST",

                    Headers = {

                        ["Content-Type"] = "application/json"

                    },

                    Body = json

                })

            else

                HttpService:PostAsync(getgenv().webhook, json)

            end

        end)

    end)()

end

-- –§—É–Ω–∫—Ü–∏—è –ø–æ–ª–Ω–æ–≥–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö –ø–ª–æ—Ç–æ–≤

local function fullScanAllPlots()

    local plotsFolder = Workspace:FindFirstChild("Plots")

    if not plotsFolder then return 0 end

    local newPets = 0

    

    -- –°–∫–∞–Ω–∏—Ä—É–µ–º –í–°–ï –ø–ª–æ—Ç—ã

    for _, plot in ipairs(plotsFolder:GetChildren()) do

        local plotOwner = getPlotOwner(plot)

        

        -- –°–∫–∞–Ω–∏—Ä—É–µ–º –≤—Å–µ—Ö –ø–æ—Ç–æ–º–∫–æ–≤ –ø–ª–æ—Ç–∞

        local descendants = plot:GetDescendants()

        for _, descendant in ipairs(descendants) do

            if TARGET_PETS[descendant.Name] then

                local mutations = getPetMutations(descendant)

                local petKey = descendant.Name .. "_" .. plotOwner .. "_" .. plot.Name .. "_" .. table.concat(mutations, "_")

                

                if not foundPetsCache[petKey] then

                    foundPetsCache[petKey] = tick() -- –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è –Ω–∞—Ö–æ–¥–∫–∏

                    sendPetFound(descendant.Name, plot.Name, plotOwner, mutations)

                    newPets = newPets + 1

                end

            end

        end

    end

    

    return newPets

end

-- –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª

local function main()

    preloadGenerations()

    

    while true do

        local currentTime = tick()

        

        -- –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–∂–Ω–æ –ª–∏ –¥–µ–ª–∞—Ç—å –ø–æ–ª–Ω—ã–π —Å–±—Ä–æ—Å

        if currentTime - lastFullReset >= RESET_INTERVAL then

            lastFullReset = currentTime

            

            -- –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–π –∫—ç—à

            local removed = cleanupOldCache()

            

            -- –î–µ–ª–∞–µ–º –ø–æ–ª–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –í–°–ï–• –ø–ª–æ—Ç–æ–≤

            local newPets = fullScanAllPlots()

        else

            -- –ë—ã—Å—Ç—Ä–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã—Ö –ø–ª–æ—Ç–æ–≤ (–µ—Å–ª–∏ –µ—Å—Ç—å)

            pcall(fullScanAllPlots)

        end

        

        wait(0.1) -- –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞

    end

end

-- –ó–∞–ø—É—Å–∫–∞–µ–º

coroutine.wrap(main)()